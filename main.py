import os
from datetime import date
from threading import Thread
from typing import List, Iterator
from time import sleep
from tempfile import gettempdir
from hashlib import md5
import sqlite3
import telebot
import schedule
from dotenv import load_dotenv
from domain.user import ConversationState, User
from repositories.settings_repository import SettingsRepository
from repositories.users_repository import UsersRepository
from services.timetable_service import TimetableService, GroupNotFoundException
from services.timetable_updater_service import TimetableUpdaterService
import services.types

telebot.apihelper.ENABLE_MIDDLEWARE = True


class TeleBot(telebot.TeleBot):
    current_user: User | None = None


TIMETABLE_FILE = os.path.join(gettempdir(), "bot-timetable.xlsx")

db = sqlite3.connect("bot.db", check_same_thread=False)

users = UsersRepository(db)
settings = SettingsRepository(db)
service = TimetableService(
    TIMETABLE_FILE, users, settings.get_week_count_start
)
updater = TimetableUpdaterService(TIMETABLE_FILE, settings)

load_dotenv()

# region Bot Initialization

bot = TeleBot(os.getenv("BOT_TOKEN"), parse_mode="HTML")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")


class StateFilter(telebot.custom_filters.AdvancedCustomFilter):
    key = "states"

    @staticmethod
    def check(message: telebot.types.Message, states: List[ConversationState]):
        if hasattr(bot, "current_user") and bot.current_user:
            return bot.current_user.conversation_state in states
        print("Could not get field 'current_user' in bot")
        return False


@bot.middleware_handler(update_types=["message"])
def set_current_user(
    bot_instance: telebot.TeleBot, message: telebot.types.Message
):
    bot_instance.current_user = users.get_or_add_user_by_id(
        message.from_user.id
    )


TIMETABLE_COMMANDS = [
    telebot.types.BotCommand("week", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"),
    telebot.types.BotCommand("today", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
    telebot.types.BotCommand("tomorrow", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
    telebot.types.BotCommand("setgroup", "–ø–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É"),
    telebot.types.BotCommand("sethl", "–∏–∑–º–µ–Ω–∏—Ç—å —Ñ—Ä–∞–∑—ã –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è"),
    telebot.types.BotCommand("cancel", "–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"),
]
ADMIN_COMMANDS = TIMETABLE_COMMANDS + [
    telebot.types.BotCommand("settt", "–û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."),
    telebot.types.BotCommand("setwcs", "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç—Å—á–µ—Ç–∞ –Ω–µ–¥–µ–ª—å."),
    telebot.types.BotCommand("update", "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."),
]
bot.add_custom_filter(StateFilter())
bot.set_my_commands(
    commands=ADMIN_COMMANDS,
    scope=telebot.types.BotCommandScopeChat(ADMIN_CHAT_ID),
)
bot.set_my_commands(
    commands=TIMETABLE_COMMANDS,
)

# endregion

# region Helper Functions


def reply_to_message(
    request: telebot.types.Message, response: services.types.Message
):
    if response.to == services.types.Recipient.SENDER:
        bot.reply_to(request, response.text)
    elif response.to == services.types.Recipient.ADMIN:
        bot.send_message(ADMIN_CHAT_ID, response.text)
    else:
        raise Exception("Not all recipients were handled")


def send_messages_as_reply_to(
    message: telebot.types.Message, from_iter: Iterator[services.types.Message]
):
    try:
        for response in from_iter:
            reply_to_message(message, response)
    except GroupNotFoundException:
        # When setting group, we guarantee that it won't throw
        # GroupNotFoundException
        send_messages_as_reply_to(
            message, service.prompt_group(bot.current_user)
        )


def update_timetable():
    try:
        for message in updater.update_timetable():
            bot.send_message(ADMIN_CHAT_ID, message.text)
    except Exception as e:
        bot.send_message(
            ADMIN_CHAT_ID,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü—Ä–∏—á–∏–Ω–∞: {e}",
        )
        raise e


# endregion


# region Handlers


@bot.message_handler(commands=["start", "help"])
def send_welcome(message: telebot.types.Message):
    bot.reply_to(
        message,
        f"–ó–¥—Ä–∞—Å—å—Ç–µ, {message.from_user.full_name}!\n"
        "–Ø —É–º–µ—é <s>—Ç–æ–ª—å–∫–æ</s> –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n"
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞.",
    )
    send_messages_as_reply_to(message, service.prompt_group(bot.current_user))


@bot.message_handler(commands=["cancel"])
def exit_settings(message, react=True):
    bot.current_user.conversation_state = ConversationState.IDLE
    users.update_user(bot.current_user)
    if react:
        bot.set_message_reaction(
            message.chat.id,
            message.id,
            [telebot.types.ReactionTypeEmoji("üëå")],
        )


@bot.message_handler(
    func=lambda m: str(m.chat.id) == ADMIN_CHAT_ID, commands=["settt"]
)
def set_timetable(message: telebot.types.Message):
    bot.current_user.conversation_state = ConversationState.SETTING_LINK
    users.update_user(bot.current_user)
    bot.reply_to(message, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.")


@bot.message_handler(states=[ConversationState.SETTING_LINK])
def handle_set_timetable(message: telebot.types.Message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        bot.reply_to(
            message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ. (–í—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏?)"
        )
    else:
        link = settings.get_timetable_link()
        try:
            settings.set_timetable_link(message.text)
            update_timetable()
            bot.reply_to(message, "–°—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        except Exception as e:
            settings.set_timetable_link(link)
            update_timetable()
            bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–∏—á–∏–Ω–∞: {e}")
    exit_settings(message, False)


@bot.message_handler(
    func=lambda m: str(m.chat.id) == ADMIN_CHAT_ID, commands=["setwcs"]
)
def set_week_count_start(message: telebot.types.Message):
    bot.current_user.conversation_state = (
        ConversationState.SETTING_WEEK_COUNT_START
    )
    users.update_user(bot.current_user)
    bot.reply_to(message, "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç—Å—á–µ—Ç–∞ –Ω–µ–¥–µ–ª—å.")


@bot.message_handler(states=[ConversationState.SETTING_WEEK_COUNT_START])
def handle_set_week_count_start(message: telebot.types.Message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        bot.reply_to(
            message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ. (–í—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏?)"
        )
    else:
        try:
            nd = date.fromisoformat(message.text)
            settings.set_week_count_start(nd)
            bot.set_message_reaction(
                message.chat.id,
                message.id,
                [telebot.types.ReactionTypeEmoji("üëå")],
            )
        except Exception:
            bot.reply_to(message, "–≠—Ç–æ –Ω–µ –¥–∞—Ç–∞.")

    exit_settings(message, False)


@bot.message_handler(
    func=lambda m: str(m.chat.id) == ADMIN_CHAT_ID, commands=["update"]
)
def update_timetable_command(message: telebot.types.Message):
    send_messages_as_reply_to(message, updater.update_timetable(force=True))
    bot.set_message_reaction(
        message.chat.id,
        message.id,
        [telebot.types.ReactionTypeEmoji("üëå")],
    )


@bot.message_handler(commands=["setgroup"])
def set_user_group(message):
    send_messages_as_reply_to(message, service.prompt_group(bot.current_user))


@bot.message_handler(states=[ConversationState.SETTING_GROUP])
def handle_set_group(message: telebot.types.Message):
    user = bot.current_user
    group = message.text
    tt = service.try_group(group)
    if not tt:
        bot.reply_to(
            message,
            "–ì—Ä—É–ø–ø–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.",
        )
        return
    user.conversation_state = ConversationState.IDLE
    user.group = group
    users.update_user(user)
    bot.set_message_reaction(
        message.chat.id,
        message.id,
        [telebot.types.ReactionTypeEmoji("üëç")],
    )
    bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")


@bot.message_handler(commands=["sethl"])
def set_hl(message):
    bot.reply_to(
        message,
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ—Ä–∞–∑—ã, "
        "–∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, "
        "–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ.\n\n"
        f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ ({bot.current_user.group}) –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, "
        "–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑.\n"
        + (
            "–ö—Ä–æ–º–µ –Ω–µ–µ, —Ç–∞–∫–∂–µ –≤—ã–¥–µ–ª—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã:"
            if len(bot.current_user.highlight_phrases) > 0
            else ""
        ),
    )
    if len(bot.current_user.highlight_phrases) > 0:
        bot.reply_to(message, bot.current_user.highlight_phrases)
    bot.current_user.conversation_state = (
        ConversationState.SETTING_HIGHLIGHT_PHRASES
    )
    users.update_user(bot.current_user)


@bot.message_handler(states=[ConversationState.SETTING_HIGHLIGHT_PHRASES])
def handle_set_hl(message: telebot.types.Message):
    success = bot.current_user.try_set_highlight_phrases(message.text)
    if success:
        bot.current_user.conversation_state = ConversationState.IDLE
        users.update_user(bot.current_user)
        bot.reply_to(message, "–§—Ä–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        bot.reply_to(
            message,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—Ä–∞–∑ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏/–∏–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –º–µ–Ω—å—à–µ —Ñ—Ä–∞–∑ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∏—Ö –¥–ª–∏–Ω—É.",
        )


@bot.message_handler(states=[ConversationState.IDLE], commands=["week"])
def timetable_week(message):
    send_messages_as_reply_to(
        message,
        service.timetable_range(
            bot.current_user.group, 0, 7, bot.current_user.highlight_phrases
        ),
    )


@bot.message_handler(states=[ConversationState.IDLE], commands=["today"])
def timetable_today(message):
    send_messages_as_reply_to(
        message,
        service.timetable_range(
            bot.current_user.group, 0, 1, bot.current_user.highlight_phrases
        ),
    )


@bot.message_handler(state=[ConversationState.IDLE], commands=["tomorrow"])
def timetable_tomorrow(message):
    send_messages_as_reply_to(
        message,
        service.timetable_range(
            bot.current_user.group, 1, 1, bot.current_user.highlight_phrases
        ),
    )


@bot.message_handler(states=[ConversationState.IDLE])
def handle_idle(message: telebot.types.Message):
    send_messages_as_reply_to(
        message,
        service.guess_request(
            bot.current_user.group,
            message.text,
            bot.current_user.highlight_phrases,
        ),
    )


@bot.message_handler(func=lambda m: True)
def unknown_message(message: telebot.types.Message):
    bot.reply_to(message, "–í—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –≤ –±–æ—Ç–µ !!!")
    bot.send_message(ADMIN_CHAT_ID, "–ö—Ç–æ-—Ç–æ –Ω–∞—à–µ–ª –æ—à–∏–±–∫—É –≤ –±–æ—Ç–µ !!!")


@bot.inline_handler(func=lambda q: True)
def inline_request(inline_query: telebot.types.InlineQuery):
    user = users.get_user_by_id(inline_query.from_user.id)
    group = user.group if user is not None else None
    hp = user.highlight_phrases if user is not None else None
    results = []
    try:
        for message in service.guess_everything(inline_query.query, group, hp):
            if message.to == services.types.Recipient.ADMIN:
                bot.send_message(ADMIN_CHAT_ID, message.text)
                continue
            if message.is_error:
                results = []
                break
            mid = md5(message.text.encode("utf-8")).hexdigest()
            group = message.get_meta("group") or "?"
            day = message.get_meta("day")
            title = message.get_meta("weekday") or "???"
            results.append(
                telebot.types.InlineQueryResultArticle(
                    mid,
                    title,
                    telebot.types.InputTextMessageContent(
                        message.text, parse_mode="HTML"
                    ),
                    description=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group}"
                    + (f" –Ω–∞ {day}" if day else ""),
                    hide_url=True,
                )
            )
    except GroupNotFoundException:
        results = []
    bot.answer_inline_query(
        inline_query.id,
        results,
        cache_time=60,
        is_personal=(user is not None),
    )


# endregion


def scheduler():
    schedule.every(5).minutes.do(update_timetable)
    while True:
        schedule.run_pending()
        sleep(60)


update_timetable()


Thread(target=scheduler, daemon=True).start()
bot.infinity_polling()
